<?php

/**
 * @file
 * Module to create result pages.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\webform\WebformSubmissionInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_theme().
 */
function dhsc_result_viewer_theme() {
  return [
    'dhsc_results_list_assured_solutions' => [
      'variables' => [
        'summary' => NULL,
        'search_criteria' => NULL,
        'count' => NULL,
        'non_matching_count' => NULL,
        'total_count' => NULL,
        'submission_url' => NULL,
        'no_matches' => NULL,
        'result' => NULL,
        'no_result' => NULL,
        'email_form' => NULL,
        'download_results_path' => NULL,
      ],
    ],
    'dhsc_results_list_self_assessment' => [
      'variables' => [
        'title' => NULL,
        'summary' => NULL,
        'result_variant' => NULL,
        'submission_url' => NULL,
        'result' => NULL,
        'no_result' => NULL,
        'email_form' => NULL,
      ],
    ],
    'dhsc_themed_results_list' => [
      'variables' => [
        'title' => NULL,
        'summary' => NULL,
        'result_variant' => NULL,
        'submission_url' => NULL,
        'responses' => NULL,
        'result' => NULL,
        'no_result' => NULL,
        'email_form' => NULL,
        'webform_id' => NULL,
      ],
    ],
    'search_criteria' => [
      'variables' => [
        'section' => NULL,
        'answers' => NULL,
      ],
    ],
    'partial_match' => [
      'variables' => [
        'title' => NULL,
        'url' => NULL,
        'answers' => [
          'section' => NULL,
          'answer' => NULL,
        ],
      ],
    ],
    'no_match' => [
      'variables' => [
        'title' => NULL,
        'url' => NULL,
        'answers' => [
          'answer' => NULL,
        ],
      ],
    ],
    'result_item' => [
      'variables' => [
        'content' => NULL,
      ],
    ],
    'result_item_self_assessment' => [
      'variables' => [
        'title' => NULL,
        'answer' => NULL,
        'content' => NULL,
      ],
    ],
    'self_assessment_tool__step_1' => [
      'variables' => [],
    ],
    'assured_solutions_tool__step_1' => [
      'variables' => [],
    ],
    'mimemail_message__dhsc_result_viewer' => [
      'render element' => 'elements',
      'base hook' => 'mimemail_message',
    ],
    'dhsc_results_pdf_content' => [
      'variables' => [
        'content' => [],
      ],
    ],
    'dhsc_themed_results_pdf_content' => [
      'variables' => [
        'results' => [],
        'webform_id' => [],
      ],
    ],
    'dhsc_themed_results_email_content' => [
      'variables' => [
        'results' => [],
        'webform_id' => [],
      ],
    ],
    'toolkit_theme_selector' => [
      'variables' => [
        'theme_name' => NULL,
      ],
      'template' => 'toolkit-theme-selector',
    ],
    'dhsc_tool__themed_results_summary' => [
      'variables' => [
        'title' => NULL,
        'result_summary' => [],
        'submission_url' => NULL,
        'download_results_path' => NULL,
        'email_form' => [],
        'manager_email_form' => [],
        'webform_id' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function dhsc_result_viewer_webform_submission_prepare_form(\Drupal\webform\WebformSubmissionInterface $webform_submission, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {

  $current_request = \Drupal::request();
  $requested_step = (int) $current_request->query->get('edit-page') ?? NULL ;

  // The list of all wizard pages.
  $all_pages = array_keys($webform_submission->getWebform()->getPages());

  // Ensure the requested step is valid before setting it.
  if (is_array($all_pages) && isset($all_pages[$requested_step])) {
    if ($form_state->get('current_page') !== $all_pages[$requested_step ? $requested_step - 1 : 0]) {
      $form_state->set('current_page', $all_pages[$requested_step ? $requested_step - 1 : 0]);
    }
  }

}


/**
 * Implements hook_form_alter().
 */
function dhsc_result_viewer_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {

  // Re-write submit label when re-submitting answers.
  $form_ids = [
    'webform_submission_assured_solutions_tool_edit_form',
    'webform_submission_self_assessment_tool_edit_form',
    'webform_submission_dsf_tool_edit_form',
    'webform_submission_dsf_tool_advanced_edit_form',
    'webform_submission_what_good_looks_like_tool_edit_form',
  ];

  if (
    in_array($form_id, $form_ids) &&
    (string) $form['actions']['submit']['#value'] === 'Save'
  ) {
    $form['actions']['submit']['#value'] = t('Continue');
  }

  $current_request = \Drupal::request();
  $requested_step = (int) $current_request->query->get('edit-page');

  // Ensure the requested step is valid before setting it.
  if ($requested_step > 0) {
    // Add save edit button.
    $form['save_edit'] = [
      '#type' => 'submit',
      '#value' => t('Save edit'),
      '#limit_validation_errors' => [],
      '#submit' => ['dhsc_result_viewer_save_edit_submit'],
      '#attributes' => ['class' => ['button', 'a-button', 'a-button--primary'], 'data-twig-suggestion' => 'save-and-edit'],
      '#theme_wrapper' => 'form_element',
      '#weight' => 10,
    ];
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['wizard_next']['#access'] = FALSE;
  }
}

/**
 * Submit handler for the Back button.
 */
function dhsc_result_viewer_back_button_submit(&$form, FormStateInterface $form_state) {
  $current_page = $form_state->get('current_page'); // The key of the current page
  $all_pages = $form_state->get('pages'); // The list of all wizard pages

  // Ensure $all_pages exists before using array_keys().
  if (is_array($all_pages)) {
    $current_step = array_search($current_page, array_keys($all_pages), true);
  } else {
    $current_step = null;
  }

  // Determine the previous step.
  if ($current_step !== null && $current_step > 0) {
    $previous_step = array_keys($all_pages)[$current_step - 1];
  } else {
    // If no valid previous step, stay on the same page.
    $previous_step = $current_page;
  }

  // Save draft before navigating back.
  $submission = $form_state->getFormObject()->getEntity();
  if ($submission instanceof WebformSubmissionInterface) {
    $submission->set('in_draft', TRUE);
    $submission->save();
  }

  // Move the wizard back.
  $form_state->set('current_page', $previous_step);
  $form_state->setRebuild();

  // Always return an AJAX response.
  $response = new AjaxResponse();

  // Rebuild the form.
  $form = \Drupal::formBuilder()->rebuildForm($form_state->getBuildInfo()['form_id'], $form_state);

  // Ensure the correct wrapper ID for Webform wizard replacement.
  $wrapper_id = $form['#id'] ?? 'webform-ajax-wrapper';

  // Replace only the Webform wizard section.
  $response->addCommand(new ReplaceCommand("#{$wrapper_id}", \Drupal::service('renderer')->render($form)));

  return $response;
}

/**
 * Submit handler for the Back button.
 */
function dhsc_result_viewer_save_edit_submit(&$form, FormStateInterface $form_state) {

  // Save draft before navigating back.
  $submission = $form_state->getFormObject()->getEntity();
  if ($submission instanceof WebformSubmissionInterface) {
    $submission->set('in_draft', FALSE);
    $submission->save();

    $token = $submission->get('token')->getValue();

    $current_page = $form_state->get('current_page');
    $all_pages = array_keys($submission->getWebform()->getPages());
    $current_step = array_search($current_page, $all_pages) + 1;

    // Generate the redirect URL with webform ID and token.
    $webform_id = $submission->getWebform()->id();
    $redirect_url = Url::fromRoute(
      'dhsc_result_viewer.themed_result_summary',
      ['webform_id' => $webform_id, 'token' => $token[0]['value']],
      ['absolute' => TRUE,
      'fragment' => 'response-' . $current_step],
    )->toString();

    // Set redirect.
    $form_state->setRedirectUrl(Url::fromUri($redirect_url));
  }
}

/**
 * Implements hook_mail().
 */
function dhsc_result_viewer_mail($key, &$message, $params) {
  $message['from'] = $params['headers']['From'] ?? NULL;

  // Strip newline characters from email subjects.
  $message['subject'] = isset($params['subject'])
    ? str_replace(["\r\n", "\r", "\n"], ' ', $params['subject'])
    : NULL;

  // Assign email body and optional parameters.
  $message['body'] = $params['body'];
  $message['params'] = isset($params['params']) ?? $params['params'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dhsc_result_viewer_preprocess_mimemail_message(array &$variables) {
  $variables['base_url'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])
    ->toString();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dhsc_result_viewer_preprocess_status_messages(array &$variables) {
  // Check for status messages in the message list.
  if (isset($variables['message_list']['status'])) {
    $status_messages = $variables['message_list']['status'];
    foreach ($status_messages as $key => $message) {
      // Remove status message if updating submission.
      if (strpos((string) $message, 'Submission updated') !== FALSE) {
        unset($variables['message_list']['status'][$key]);
      }
    }
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function dhsc_result_viewer_webform_submission_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  // Target specific webforms.
  if (in_array($form['#webform_id'], [
    'self_assessment_tool',
    'assured_solutions_tool',
    'dsf_tool',
    'dsf_tool_advanced',
    'what_good_looks_like_tool',
  ]) && ($current_page = $form_state->get('current_page') !== '')) {
    // Add a hidden form element to track the current step.
    $form['current_step'] = [
      '#type' => 'value',
      '#value' => $current_page,
    ];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dhsc_result_viewer_theme_suggestions_webform_submission_form_alter(array &$suggestions, array $variables, $hook) {
  if (in_array($variables['form']['#webform_id'], [
    'self_assessment_tool',
    'assured_solutions_tool',
  ])) {
    $suggestions[] = 'webform_submission_form' . '__dhsc_tool__step';
    $suggestions[] = 'webform_submission_form' . '__dhsc_tool__' . $variables['form']['current_step']['#value'];
  }
  else {
    $suggestions[] = 'webform_submission_form' . '__dhsc_tool__step';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dhsc_result_viewer_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . $element['#type'] . '__' . $suggestion_suffix;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for dhsc_tool__themed_results_summary.
 */
function dhsc_result_viewer_theme_suggestions_dhsc_tool__themed_results_summary_alter(array &$suggestions, array $variables) {
  if (!empty($variables['webform_id'])) {
    $webform_id = $variables['webform_id'];

    // Add a theme suggestion using the webform ID as a suffix.
    $suggestions[] = 'dhsc_tool__themed_results_summary__' . $webform_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for dhsc_themed_results_pdf_content.
 */
function dhsc_result_viewer_theme_suggestions_dhsc_themed_results_pdf_content_alter(array &$suggestions, array $variables) {
  if (!empty($variables['webform_id'])) {
    $webform_id = $variables['webform_id'];

    // Add a theme suggestion using the webform ID as a suffix.
    $suggestions[] = 'dhsc_themed_results_pdf_content__' . $webform_id;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for dhsc_themed_results_list.
 */
function dhsc_result_viewer_theme_suggestions_dhsc_themed_results_list_alter(array &$suggestions, array $variables) {
  if (!empty($variables['webform_id'])) {
    $webform_id = $variables['webform_id'];

    // Add a theme suggestion using the webform ID as a suffix.
    $suggestions[] = 'dhsc_themed_results_list__' . $webform_id;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dhsc_result_viewer_preprocess_self_assessment_tool__step_1(&$variables) {
  // Get tool landing page uri from config.
  $config = \Drupal::config('dhsc_result_viewer.result_summary_settings');
  $landing_page_uri = $config->get('sa_landing_page');

  // Pass url from config for back behaviour.
  $variables['link'] = Url::fromUserInput($landing_page_uri, ['absolute' => TRUE]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function dhsc_result_viewer_preprocess_assured_solutions_tool__step_1(&$variables) {
  // Get tool landing page uri from config.
  $config = \Drupal::config('dhsc_result_viewer.result_summary_settings');
  $landing_page_uri = $config->get('as_landing_page');

  // Pass url from config for back behaviour.
  $variables['link'] = Url::fromUserInput($landing_page_uri, ['absolute' => TRUE]);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for mimemail_message templates.
 */
function dhsc_result_viewer_theme_suggestions_mimemail_message_alter(array &$suggestions, array $variables) {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Attempt to retrieve the webform_id from the route parameters.
  $webform_id = $route_match->getParameter('webform_id');

  // Ensure the webform_id is valid.
  if (!empty($webform_id) && is_string($webform_id)) {
    // Normalize webform ID format.
    $webform_id = str_replace('-', '_', $webform_id);

    // Add a suggestion based on a specific route.
    if ($route_name == 'dhsc_result_viewer.themed_result_summary') {
      $suggestions[] = 'mimemail_message__dhsc_result_viewer__' . $webform_id;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for dhsc_themed_results_email_content templates.
 */
function dhsc_result_viewer_theme_suggestions_dhsc_themed_results_email_content_alter(array &$suggestions, array $variables) {
  if (!empty($variables['webform_id'])) {
    $webform_id = $variables['webform_id'];

    // Add a theme suggestion using the webform ID as a suffix.
    $suggestions[] = 'dhsc_themed_results_email_content__' . $webform_id;
  }
}
